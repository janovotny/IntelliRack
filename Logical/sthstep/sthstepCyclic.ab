PROGRAM _CYCLIC
(* cyclic program *)

; V1.00 	sva		2009-06-17	New
; V1.01
; V1.02		sva		2009-08-14	Handling of restart after emergency stop changed


loop idxDrive:= 1 to 3 do

	speedJog[idxDrive]	:= 20*speedJogOptions[idxDrive]

	gearFactor[idxDrive]				:=  (real(driveStepPerRevolution[idxDrive]) * real(microStepPerDriveStep[idxDrive]) * real(gearZ2[idxDrive]) ) / (real(gearZ1[idxDrive]) * real(gearSlope[idxDrive]))
	referencePositionMicroStep[idxDrive]	:= dint(real(referencePositionMM[idxDrive]) * gearFactor[idxDrive])

	; Get status bits
	; ---------------

	stStepperStatus[idxDrive].readyToSwitchOn		:= bit_tst(stStepperIfIn[idxDrive].status, 0)
	stStepperStatus[idxDrive].switchedOn				:= bit_tst(stStepperIfIn[idxDrive].status, 1)
	stStepperStatus[idxDrive].operationEnabled	:= bit_tst(stStepperIfIn[idxDrive].status, 2)
	stStepperStatus[idxDrive].fault							:= bit_tst(stStepperIfIn[idxDrive].status, 3)
	stStepperStatus[idxDrive].voltageEnabled		:= bit_tst(stStepperIfIn[idxDrive].status, 4)
	stStepperStatus[idxDrive].quickStop					:= bit_tst(stStepperIfIn[idxDrive].status, 5)
	stStepperStatus[idxDrive].switchOnDisabeld	:= bit_tst(stStepperIfIn[idxDrive].status, 6)
	stStepperStatus[idxDrive].warning						:= bit_tst(stStepperIfIn[idxDrive].status, 7)
	stStepperStatus[idxDrive].targetReached			:= bit_tst(stStepperIfIn[idxDrive].status, 10)

	; Drive activated and emergency stopp not pressed
	if (driveActive[idxDrive] = 1) then

		; New referencing
		if (referenceSet[idxDrive] = 255) then
			stStepperControl[idxDrive].enbleVoltage			:= 0
			stStepperControl[idxDrive].quickStop				:= 0
			stStepperControl[idxDrive].switchOn					:= 0
			stStepperControl[idxDrive].enableOperation	:= 0
			referenceSet[idxDrive]											:= 0
			sStepper[idxDrive]													:= sTEP_INIT
		endif

		; State machine stepper
		; ---------------------

		; Emergency stop pressed
;		if (Inp.emgCtrl = 1) then
;			sStepper[idxDrive]	:= sTEP_EMERGENCY_STOP
;		endif

		; Stepper error
		if (stStepperStatus[idxDrive].fault = 1) then
			sStepper[idxDrive]	:= sTEP_ERROR
		endif

		case sStepper[idxDrive] of

			action 0:	; Init step

				stStepperControl[idxDrive].enbleVoltage	:= 1
				stStepperControl[idxDrive].quickStop		:= 1

				if (stStepperStatus[idxDrive].readyToSwitchOn = 1) then

					stStepperControl[idxDrive].switchOn	:= 1

					if (stStepperStatus[idxDrive].switchedOn = 1) then

						stStepperControl[idxDrive].enableOperation	:= 1

						; Drive reference not set
						if (referenceSet[idxDrive] = 0) and (referenceUsed[idxDrive]=TRUE) then
							sStepper[idxDrive]						:= sTEP_MOVE_REFERENCE
							stStepperIfOut[idxDrive].mode	:= modeReference[idxDrive]
						endif

						; Drive reference is set
						if (referenceSet[idxDrive] = 1) or (referenceUsed[idxDrive]=FALSE) then
							sStepper[idxDrive]						:= sTEP_WAIT
							stStepperIfOut[idxDrive].mode	:= mODE_MOVE_POSITION
						endif
					endif
				endif

			endaction


			action 12:	; sTEP_MOVE_REFERENCE

				; Refenece sensor reached
				if (stStepperStatus[idxDrive].targetReached = 1) then
					sStepper[idxDrive]										:= sTEP_SET_REFERENCE_POSITION
					stStepperIfOut[idxDrive].absPosSetVal	:= referencePositionMicroStep[idxDrive]
				endif

			endaction


			action 14:	; sTEP_SET_REFERENCE_POSITION

				; Reference position set
				if (stStepperStatus[idxDrive].targetReached = 1) then
					stStepperIfOut[idxDrive].mode	:= mODE_SET_POSITION
					sStepper[idxDrive]						:= sTEP_WAIT
					referenceSet[idxDrive]				:= 1
					firstMovement[idxDrive]				:= 1
					timerStartUp[idxDrive]				:= 0
				endif

			endaction


			action 20:	; sTEP_WAIT

				if (timerStartUp[idxDrive] <= 200) then
					inc(timerStartUp[idxDrive])
				endif

				; Automatic moving
(*				if (movePos[idxDrive] = 1) then
					; Drive stopped
					if (stStepperStatus[idxDrive].targetReached = 1) and (timerStartUp[idxDrive] > 200) then
						if (oldSetPosition[idxDrive] <> setPosition[idxDrive]) or (firstMovement[idxDrive] = 1) then
							firstMovement[idxDrive]		:= 0
							oldSetPosition[idxDrive]	:= setPosition[idxDrive]
							stStepperIfOut[idxDrive].absPosSetVal	:= (dint(   ((setPosition[idxDrive] / 2)+ mOVING_OFFSET) * gearFactor[idxDrive]))
							stStepperIfOut[idxDrive].mode					:= mODE_MOVE_POSITION
							sStepper[idxDrive]										:= sTEP_MOVE_APPROX_POS
							timer[idxDrive]												:= 0
						endif
					endif
				else
*)
					if (moveStepperPositive[idxDrive]=TRUE) and not (endPointPositive[idxDrive] < stStepperIfIn[idxDrive].absPosActVal) then
						stStepperIfOut[idxDrive].absPosSetVal	:= speedJog[idxDrive]
						stStepperIfOut[idxDrive].mode					:= mODE_MOVE_JOG
						sStepper[idxDrive]										:= sTEP_MOVE_JOG
					else if (moveStepperNegative[idxDrive]=TRUE) and not (endPointNegative[idxDrive] > stStepperIfIn[idxDrive].absPosActVal) then
						stStepperIfOut[idxDrive].absPosSetVal	:= -speedJog[idxDrive]
						stStepperIfOut[idxDrive].mode					:= mODE_MOVE_JOG
						sStepper[idxDrive]										:= sTEP_MOVE_JOG
					else if	(setPointZero[idxDrive]=TRUE)	then
						zeroPoint[idxDrive]										:= stStepperIfIn[idxDrive].absPosActVal
						refPointMove[idxDrive]								:= DINT(((REAL(refPoint[idxDrive])+REAL(zeroPoint[idxDrive]))/1024)*200*256)
					else if (movePointRef[idxDrive]=TRUE) then
						stStepperIfOut[idxDrive].absPosSetVal	:= refPointMove[idxDrive]
						stStepperIfOut[idxDrive].mode					:= mODE_MOVE_POSITION
						sStepper[idxDrive]										:= sTEP_MOVE_APPROX_POS
					else if (currentPage = 0) then
						stStepperIfOut[1].absPosSetVal				:= movesteppos
						stStepperIfOut[1].mode								:= mODE_MOVE_POSITION
						sStepper[1]														:= 30
					endif
;				endif

				; Switch on disabled
				if (stStepperStatus[idxDrive].switchOnDisabeld = 1) then
					stStepperControl[idxDrive].switchOn	:= 0
					sStepper[idxDrive]									:= sTEP_SHUTDOWN
				endif

			endaction

			action 21: ;sTEP_MOVE_APPROX_POS

				; Moved to set position + offset
				if (stStepperStatus[idxDrive].targetReached = 1) then
					stStepperIfOut[idxDrive].absPosSetVal	:= refPointMove[idxDrive]
					stStepperIfOut[idxDrive].mode					:= mODE_MOVE_POSITION
					sStepper[idxDrive]										:= sTEP_MOVE_FINE_POS
				endif

				; Switch on disabled
				if (stStepperStatus[idxDrive].switchOnDisabeld = 1) then
					stStepperControl[idxDrive].switchOn	:= 0
					sStepper[idxDrive]									:= sTEP_SHUTDOWN
				endif

			endaction

			action 22:		; sTEP_MOVE_FINE_POS

				; Moved to set position
				if (stStepperStatus[idxDrive].targetReached = 1) then
					sStepper[idxDrive]	:= sTEP_WAIT
				endif

				; Switch on disabled
				if (stStepperStatus[idxDrive].switchOnDisabeld=1) then
					stStepperControl[idxDrive].switchOn	:= 0
					sStepper[idxDrive]									:= sTEP_SHUTDOWN
				endif

			endaction


			action 23: ; sTEP_MOVE_JOG

			endPointNegative[1]	:= zeroPoint[1] - 2200
			endPointNegative[2]	:= zeroPoint[2] - 3800
			endPointNegative[3]	:= zeroPoint[3] - 1280 - 59

			endPointPositive[1]	:= zeroPoint[1] + 2304
			endPointPositive[2]	:= zeroPoint[2]
			endPointPositive[3]	:= zeroPoint[3] - 59

				; Switch on disabled
				if (stStepperStatus[idxDrive].switchOnDisabeld = 1) then
					stStepperControl[idxDrive].switchOn	:= 0
					sStepper[idxDrive]									:= sTEP_SHUTDOWN
				endif

				if ((moveStepperPositive[idxDrive]=FALSE) or (endPointPositive[idxDrive] < stStepperIfIn[idxDrive].absPosActVal)) and ((moveStepperNegative[idxDrive]=FALSE) or (endPointNegative[idxDrive] > stStepperIfIn[idxDrive].absPosActVal)) then
					stStepperIfOut[idxDrive].absPosSetVal	:= 0
					sStepper[idxDrive]										:= sTEP_SHUTDOWN
				endif

			endaction


			action 24:	;sTEP_MOVE_REF

				; Switch on disabled
				if (stStepperStatus[idxDrive].switchOnDisabeld = 1) then
					stStepperControl[idxDrive].switchOn	:= 0
					sStepper[idxDrive]									:= sTEP_SHUTDOWN
				endif

				if (movePointRef[idxDrive]=FALSE) then
					sStepper[idxDrive]	:= sTEP_WAIT
				endif

			endaction


			action 25:	; sTEP_SHUTDOWN

				; Switch on enabled
				if (stStepperStatus[idxDrive].switchOnDisabeld = 0) then
					stStepperControl[idxDrive].switchOn	:= 1
					sStepper[idxDrive]									:= sTEP_WAIT
				endif

			endaction

			action 30:
				if (stStepperStatus[idxDrive].switchOnDisabeld = 1) then
					stStepperControl[idxDrive].switchOn	:= 0
					sStepper[idxDrive]									:= sTEP_SHUTDOWN
				endif

				if 1 = 1 then
					sStepper[idxDrive]	:= sTEP_WAIT
				endif

			endaction

			action 250:	; Emergency stopp

				stStepperControl[idxDrive].enableOperation	:= 0

				; Emergency stop released
				if (Inp.emgCtrl=0) then
					stStepperControl[idxDrive].enbleVoltage	:= 1
					stStepperControl[idxDrive].quickStop		:= 1
					sStepper[idxDrive]											:= sTEP_INIT
				endif

			endaction

			action 255:	; Error step

				stStepperControl[idxDrive].enbleVoltage			:= 0
				stStepperControl[idxDrive].quickStop				:= 0
				stStepperControl[idxDrive].switchOn					:= 0
				stStepperControl[idxDrive].enableOperation	:= 0
				stStepperControl[idxDrive].faultReset				:= 1

				if (stStepperStatus[idxDrive].fault=0) then
					stStepperControl[idxDrive].enbleVoltage	:= 1
					stStepperControl[idxDrive].quickStop		:= 1
					sStepper[idxDrive]											:= sTEP_INIT
				endif

			endaction

		endcase

	; Not active
	else

		stStepperControl[idxDrive].enbleVoltage			:= 0
		stStepperControl[idxDrive].quickStop				:= 0
		stStepperControl[idxDrive].switchOn					:= 0
		stStepperControl[idxDrive].enableOperation	:= 0
		oldWireLengthMM[idxDrive]										:= 0
		sStepper[idxDrive]													:= sTEP_INIT
		referenceSet[idxDrive]											:= 0

	endif


	; Set control word
	; ----------------

	if (stStepperControl[idxDrive].switchOn=1) then
		stStepperIfOut[idxDrive].control	:= bit_set(stStepperIfOut[idxDrive].control, 0)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 0)
	endif

	if (stStepperControl[idxDrive].enbleVoltage=1) then
		stStepperIfOut[idxDrive].control	:= bit_set(stStepperIfOut[idxDrive].control, 1)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 1)
	endif

	if (stStepperControl[idxDrive].quickStop=1) then
		stStepperIfOut[idxDrive].control	:= bit_set(stStepperIfOut[idxDrive].control, 2)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 2)
	endif

	if (stStepperControl[idxDrive].enableOperation=1) then
		stStepperIfOut[idxDrive].control	:= bit_set(stStepperIfOut[idxDrive].control, 3)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 3)
	endif

	if (stStepperControl[idxDrive].faultReset=1) then
		stStepperControl[idxDrive].faultReset	:= 0
		stStepperIfOut[idxDrive].control				:= bit_set(stStepperIfOut[idxDrive].control, 7)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 7)
	endif

	if (stStepperControl[idxDrive].rMotorIdent=1) then
		stStepperControl[idxDrive].rMotorIdent	:= 0
		stStepperIfOut[idxDrive].control					:= bit_set(stStepperIfOut[idxDrive].control, 11)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 11)
	endif

	if (stStepperControl[idxDrive].rResetWarning=1) then
		stStepperControl[idxDrive].rResetWarning	:= 0
		stStepperIfOut[idxDrive].control						:= bit_set(stStepperIfOut[idxDrive].control, 12)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 12)
	endif

	if (stStepperControl[idxDrive].enableOperation=1) then
		stStepperIfOut[idxDrive].control	:= bit_set(stStepperIfOut[idxDrive].control, 14)
	else
		stStepperIfOut[idxDrive].control	:= bit_clr(stStepperIfOut[idxDrive].control, 14)
	endif

	; MMI aufgestartet d.h. alle Daten aktuell
;	if (dMMI.picture.idxActPic<>0) then
		driveActive[idxDrive]	:= 1
;	endif

endloop
END_PROGRAM

